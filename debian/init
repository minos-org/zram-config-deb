#!/bin/sh
### BEGIN INIT INFO
# Provides:          zram-config
# Required-Start:    $local_fs $remote_fs
# Required-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Initializes zram swapping
# Description:       This scripts initializes zram swapping on systems who
#                    support it
### END INIT INFO

PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="zram support"
NAME="zram-config"
SCRIPTNAME="/etc/init.d/${NAME}"

#read configuration variable file if it is present
[ -r "/etc/default/${NAME}" ] && . "/etc/default/${NAME}"

#sanitize missing settings
[ -z "${ENABLED}" ]        && ENABLED="yes"
[ -z "${UNLOAD_ON_STOP}" ] && UNLOAD_ON_STOP="yes"
[ -z "${RAM_PERCENTAGE}" ] && RAM_PERCENTAGE="50"
[ -z "${PRIORITY}" ]       && PRIORITY="5"
# if something goes wrong, assume we have 1
[ -z "${NUM_CPUS}" ]       && NUM_CPUS="$(grep -c processor /proc/cpuinfo 2>/dev/null | sed 's/^0$/1/')"
[ -z "${NUM_CPUS}" ]       && NUM_CPUS="1"

#load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

#define LSB log_* functions.
#depend on lsb-base (>= 3.2-14) to ensure that this file is present
#and status_of_proc is working.
. /lib/lsb/init-functions

_is_int() { #look for an integer, returns 0 on success, 1 otherwise
    #http://www.unix.com/shell-programming-and-scripting/172070-help-scripting-command.html
    case "${1}" in
        *[!0-9]*|"") return 1 ;;
    esac
}

_start() {
    #0   if zram has been enabled or was already enabled
    #1   if zram couldn't be enabled
    #127 if zram kernel module is missing

    if [ X"${ENABLED}" != X"yes" ]; then
        log_warning_msg "Disabled via /etc/default/${NAME}"
        exit 0
    fi

    if ! command -v "modinfo" >/dev/null 2>&1; then
        log_warning_msg "/sbin/modinfo isn't available, install the 'kmod' package and retry"
        exit 127
    elif ! modinfo zram >/dev/null 2>&1; then
        log_warning_msg "couldn't find the 'zram' module, install the 'linux-image-extra-virtual' package and retry"
        exit 127
    elif grep "/dev/zram[0-9]" /proc/swaps >/dev/null 2>&1; then
        log_warning_msg "${DESC} is already enabled"
        exit 0
    fi

    if modinfo zram | grep ' zram_num_devices:' >/dev/null 2>&1; then
        MODPROBE_ARGS="zram_num_devices=${NUM_CPUS}"
    elif modinfo zram | grep ' num_devices:' >/dev/null 2>&1; then
        MODPROBE_ARGS="num_devices=${NUM_CPUS}"
    else
        return 1
    fi

    modprobe zram "${MODPROBE_ARGS}"

    #validate RAM_PERCENTAGE
    if ! _is_int "${RAM_PERCENTAGE}"    || \
        [ "${RAM_PERCENTAGE}" -lt "1" ] || \
        [ "${RAM_PERCENTAGE}" -ge "100" ]; then
        RAM_PERCENTAGE="50"
    fi

    #calculate memory to use for zram (1/2 of ram)
    totalmem="$(awk '/MemTotal/{print $2; exit}' /proc/meminfo)"
    [ -z "${totalmem}" ] && totalmem="$(LC_ALL=C free | awk '/^Mem:/{print $2; exit}')"
    mem="$((totalmem * RAM_PERCENTAGE / 100))"
    mem="$((mem / NUM_CPUS))"
    mem="$((mem * 1024))"

    #initialize devices
    for i in $(seq "${NUM_CPUS}"); do
        DEVNUMBER="$((i - 1))"
        printf "%s\\n" "${mem}" > "/sys/block/zram${DEVNUMBER}/disksize"
        log_action_msg "Setting up /dev/zram${DEVNUMBER}"
        mkswap "/dev/zram${DEVNUMBER}"
        swapon -p "${PRIORITY}" "/dev/zram${DEVNUMBER}"
    done
}

_stop() {
    #0 if zram has been disabled, was already disabled or kernel module is missing
    #1 if zram coudln't be disabled

    if [ X"${ENABLED}" != X"yes" ]; then
        log_warning_msg "Disabled via /etc/default/${NAME}"
        return 0
    fi

    if ! command -v "modinfo" >/dev/null 2>&1; then
        log_warning_msg "/sbin/modinfo isn't available, install the 'kmod' package and retry"
        return 0
    elif ! modinfo zram >/dev/null 2>&1; then
        log_warning_msg "couldn't find the 'zram' module, install the 'linux-image-extra-virtual' package and retry"
        return 0
    elif ! grep "/dev/zram[0-9]" /proc/swaps >/dev/null 2>&1; then
        log_warning_msg "${DESC} is already disabled"
        exit 0
    fi

    #switching off swap
    for i in $(seq "${NUM_CPUS}"); do
        DEVNUMBER="$((i - 1))"
        if grep "/dev/zram${DEVNUMBER}" /proc/swaps >/dev/null 2>&1; then
            log_action_msg "Switching off /dev/zram${DEVNUMBER}"
            swapoff "/dev/zram${DEVNUMBER}"
            sleep 1
        fi
    done

    if [ X"${UNLOAD_ON_STOP}" = X"yes" ]; then
        rmmod zram || return 1
    fi
}

_status() {
    if grep "/dev/zram[0-9]" /proc/swaps >/dev/null 2>&1; then
        log_warning_msg "${DESC} is enabled"
        exit 0
    else
        log_failure_msg "${DESC} is disabled"
        exit 1
    fi
}

case "${1}" in
    start)
        [ "${VERBOSE}" != no ] && log_daemon_msg "Enabling ${DESC}" "${NAME}"
        _start
        log_end_msg "${?}"
        ;;

    stop)
        [ "${VERBOSE}" != no ] && log_daemon_msg "Disabling ${DESC}" "${NAME}"
        _stop
        log_end_msg "${?}"
        ;;

    status)
        _status
        log_end_msg "${?}"
        ;;

    restart|force-reload)
        [ "${VERBOSE}" != no ] && log_daemon_msg "Restarting ${DESC}" "${NAME}"
        _stop
        _start
        log_end_msg "${?}"
        ;;

    *)
        printf "%s\\n" "Usage: ${SCRIPTNAME} {start|stop|status|restart|force-reload}" >&2
        exit 3
        ;;
esac
